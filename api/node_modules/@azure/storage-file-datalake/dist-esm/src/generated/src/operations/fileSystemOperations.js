/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/fileSystemOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a FileSystemOperations. */
var FileSystemOperations = /** @class */ (function () {
    /**
     * Create a FileSystemOperations.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function FileSystemOperations(client) {
        this.client = client;
    }
    FileSystemOperations.prototype.create = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createOperationSpec, callback);
    };
    FileSystemOperations.prototype.setProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setPropertiesOperationSpec, callback);
    };
    FileSystemOperations.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    FileSystemOperations.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    FileSystemOperations.prototype.listPaths = function (recursive, options, callback) {
        return this.client.sendOperationRequest({
            recursive: recursive,
            options: options
        }, listPathsOperationSpec, callback);
    };
    return FileSystemOperations;
}());
export { FileSystemOperations };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{filesystem}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.resource1,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.properties,
        Parameters.requestId,
        Parameters.version
    ],
    responses: {
        201: {
            headersMapper: Mappers.FileSystemCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSystemCreateHeaders
        }
    },
    serializer: serializer
};
var setPropertiesOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.resource1,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.properties,
        Parameters.requestId,
        Parameters.version,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileSystemSetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSystemSetPropertiesHeaders
        }
    },
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "HEAD",
    path: "{filesystem}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.resource1,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.requestId,
        Parameters.version
    ],
    responses: {
        200: {
            headersMapper: Mappers.FileSystemGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSystemGetPropertiesHeaders
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{filesystem}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.resource1,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.requestId,
        Parameters.version,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        202: {
            headersMapper: Mappers.FileSystemDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSystemDeleteHeaders
        }
    },
    serializer: serializer
};
var listPathsOperationSpec = {
    httpMethod: "GET",
    path: "{filesystem}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.continuation,
        Parameters.path,
        Parameters.recursive0,
        Parameters.maxResults,
        Parameters.upn,
        Parameters.resource1,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.requestId,
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PathList,
            headersMapper: Mappers.FileSystemListPathsHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.FileSystemListPathsHeaders
        }
    },
    serializer: serializer
};
//# sourceMappingURL=fileSystemOperations.js.map