/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
export var acl = {
    parameterPath: [
        "options",
        "acl"
    ],
    mapper: {
        serializedName: "x-ms-acl",
        type: {
            name: "String"
        }
    }
};
export var action0 = {
    parameterPath: "action",
    mapper: {
        required: true,
        serializedName: "action",
        type: {
            name: "Enum",
            allowedValues: [
                "append",
                "flush",
                "setProperties",
                "setAccessControl"
            ]
        }
    }
};
export var action1 = {
    parameterPath: [
        "options",
        "action"
    ],
    mapper: {
        serializedName: "action",
        type: {
            name: "Enum",
            allowedValues: [
                "getAccessControl",
                "getStatus"
            ]
        }
    }
};
export var action2 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "action",
        defaultValue: 'setAccessControl',
        type: {
            name: "String"
        }
    }
};
export var action3 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "action",
        defaultValue: 'flush',
        type: {
            name: "String"
        }
    }
};
export var action4 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "action",
        defaultValue: 'append',
        type: {
            name: "String"
        }
    }
};
export var cacheControl = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "cacheControl"
    ],
    mapper: {
        serializedName: "x-ms-cache-control",
        type: {
            name: "String"
        }
    }
};
export var close = {
    parameterPath: [
        "options",
        "close"
    ],
    mapper: {
        serializedName: "close",
        type: {
            name: "Boolean"
        }
    }
};
export var contentDisposition = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "contentDisposition"
    ],
    mapper: {
        serializedName: "x-ms-content-disposition",
        type: {
            name: "String"
        }
    }
};
export var contentEncoding = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "contentEncoding"
    ],
    mapper: {
        serializedName: "x-ms-content-encoding",
        type: {
            name: "String"
        }
    }
};
export var contentLanguage = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "contentLanguage"
    ],
    mapper: {
        serializedName: "x-ms-content-language",
        type: {
            name: "String"
        }
    }
};
export var contentLength = {
    parameterPath: [
        "options",
        "contentLength"
    ],
    mapper: {
        serializedName: "Content-Length",
        constraints: {
            InclusiveMinimum: 0
        },
        type: {
            name: "Number"
        }
    }
};
export var contentMD5 = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "contentMD5"
    ],
    mapper: {
        serializedName: "x-ms-content-md5",
        type: {
            name: "ByteArray"
        }
    }
};
export var contentType = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "contentType"
    ],
    mapper: {
        serializedName: "x-ms-content-type",
        type: {
            name: "String"
        }
    }
};
export var continuation = {
    parameterPath: [
        "options",
        "continuation"
    ],
    mapper: {
        serializedName: "continuation",
        type: {
            name: "String"
        }
    }
};
export var group = {
    parameterPath: [
        "options",
        "group"
    ],
    mapper: {
        serializedName: "x-ms-group",
        type: {
            name: "String"
        }
    }
};
export var ifMatch = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifMatch"
    ],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export var ifModifiedSince = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifModifiedSince"
    ],
    mapper: {
        serializedName: "If-Modified-Since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
export var ifNoneMatch = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifNoneMatch"
    ],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export var ifUnmodifiedSince = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifUnmodifiedSince"
    ],
    mapper: {
        serializedName: "If-Unmodified-Since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
export var leaseId = {
    parameterPath: [
        "options",
        "leaseAccessConditions",
        "leaseId"
    ],
    mapper: {
        serializedName: "x-ms-lease-id",
        type: {
            name: "String"
        }
    }
};
export var maxResults = {
    parameterPath: [
        "options",
        "maxResults"
    ],
    mapper: {
        serializedName: "maxResults",
        constraints: {
            InclusiveMinimum: 1
        },
        type: {
            name: "Number"
        }
    }
};
export var mode = {
    parameterPath: [
        "options",
        "mode"
    ],
    mapper: {
        serializedName: "mode",
        type: {
            name: "Enum",
            allowedValues: [
                "legacy",
                "posix"
            ]
        }
    }
};
export var owner = {
    parameterPath: [
        "options",
        "owner"
    ],
    mapper: {
        serializedName: "x-ms-owner",
        type: {
            name: "String"
        }
    }
};
export var path = {
    parameterPath: [
        "options",
        "path"
    ],
    mapper: {
        serializedName: "directory",
        type: {
            name: "String"
        }
    }
};
export var permissions = {
    parameterPath: [
        "options",
        "permissions"
    ],
    mapper: {
        serializedName: "x-ms-permissions",
        type: {
            name: "String"
        }
    }
};
export var position = {
    parameterPath: [
        "options",
        "position"
    ],
    mapper: {
        serializedName: "position",
        type: {
            name: "Number"
        }
    }
};
export var prefix = {
    parameterPath: [
        "options",
        "prefix"
    ],
    mapper: {
        serializedName: "prefix",
        type: {
            name: "String"
        }
    }
};
export var properties = {
    parameterPath: [
        "options",
        "properties"
    ],
    mapper: {
        serializedName: "x-ms-properties",
        type: {
            name: "String"
        }
    }
};
export var proposedLeaseId = {
    parameterPath: [
        "options",
        "proposedLeaseId"
    ],
    mapper: {
        serializedName: "x-ms-proposed-lease-id",
        type: {
            name: "String"
        }
    }
};
export var range = {
    parameterPath: [
        "options",
        "range"
    ],
    mapper: {
        serializedName: "Range",
        type: {
            name: "String"
        }
    }
};
export var recursive0 = {
    parameterPath: "recursive",
    mapper: {
        required: true,
        serializedName: "recursive",
        type: {
            name: "Boolean"
        }
    }
};
export var recursive1 = {
    parameterPath: [
        "options",
        "recursive"
    ],
    mapper: {
        serializedName: "recursive",
        type: {
            name: "Boolean"
        }
    }
};
export var renameSource = {
    parameterPath: [
        "options",
        "renameSource"
    ],
    mapper: {
        serializedName: "x-ms-rename-source",
        type: {
            name: "String"
        }
    }
};
export var requestId = {
    parameterPath: [
        "options",
        "requestId"
    ],
    mapper: {
        serializedName: "x-ms-client-request-id",
        type: {
            name: "String"
        }
    }
};
export var resource0 = {
    parameterPath: "resource",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "resource",
        defaultValue: 'account',
        type: {
            name: "String"
        }
    }
};
export var resource1 = {
    parameterPath: "resource",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "resource",
        defaultValue: 'filesystem',
        type: {
            name: "String"
        }
    }
};
export var resource2 = {
    parameterPath: [
        "options",
        "resource"
    ],
    mapper: {
        serializedName: "resource",
        type: {
            name: "Enum",
            allowedValues: [
                "directory",
                "file"
            ]
        }
    }
};
export var retainUncommittedData = {
    parameterPath: [
        "options",
        "retainUncommittedData"
    ],
    mapper: {
        serializedName: "retainUncommittedData",
        type: {
            name: "Boolean"
        }
    }
};
export var sourceIfMatch = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfMatch"
    ],
    mapper: {
        serializedName: "x-ms-source-if-match",
        type: {
            name: "String"
        }
    }
};
export var sourceIfModifiedSince = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfModifiedSince"
    ],
    mapper: {
        serializedName: "x-ms-source-if-modified-since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
export var sourceIfNoneMatch = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfNoneMatch"
    ],
    mapper: {
        serializedName: "x-ms-source-if-none-match",
        type: {
            name: "String"
        }
    }
};
export var sourceIfUnmodifiedSince = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfUnmodifiedSince"
    ],
    mapper: {
        serializedName: "x-ms-source-if-unmodified-since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
export var sourceLeaseId = {
    parameterPath: [
        "options",
        "sourceLeaseId"
    ],
    mapper: {
        serializedName: "x-ms-source-lease-id",
        type: {
            name: "String"
        }
    }
};
export var timeout = {
    parameterPath: [
        "options",
        "timeout"
    ],
    mapper: {
        serializedName: "timeout",
        constraints: {
            InclusiveMinimum: 0
        },
        type: {
            name: "Number"
        }
    }
};
export var transactionalContentHash = {
    parameterPath: [
        "options",
        "pathHttpHeaders",
        "transactionalContentHash"
    ],
    mapper: {
        serializedName: "Content-MD5",
        type: {
            name: "ByteArray"
        }
    }
};
export var umask = {
    parameterPath: [
        "options",
        "umask"
    ],
    mapper: {
        serializedName: "x-ms-umask",
        type: {
            name: "String"
        }
    }
};
export var upn = {
    parameterPath: [
        "options",
        "upn"
    ],
    mapper: {
        serializedName: "upn",
        type: {
            name: "Boolean"
        }
    }
};
export var url = {
    parameterPath: "url",
    mapper: {
        required: true,
        serializedName: "url",
        defaultValue: '',
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export var version = {
    parameterPath: "version",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-version",
        defaultValue: '2019-07-07',
        type: {
            name: "String"
        }
    }
};
export var xMsLeaseAction = {
    parameterPath: "xMsLeaseAction",
    mapper: {
        required: true,
        serializedName: "x-ms-lease-action",
        type: {
            name: "Enum",
            allowedValues: [
                "acquire",
                "break",
                "change",
                "renew",
                "release"
            ]
        }
    }
};
export var xMsLeaseBreakPeriod = {
    parameterPath: [
        "options",
        "xMsLeaseBreakPeriod"
    ],
    mapper: {
        serializedName: "x-ms-lease-break-period",
        type: {
            name: "Number"
        }
    }
};
export var xMsLeaseDuration = {
    parameterPath: [
        "options",
        "xMsLeaseDuration"
    ],
    mapper: {
        serializedName: "x-ms-lease-duration",
        type: {
            name: "Number"
        }
    }
};
export var xMsRangeGetContentMd5 = {
    parameterPath: [
        "options",
        "xMsRangeGetContentMd5"
    ],
    mapper: {
        serializedName: "x-ms-range-get-content-md5",
        type: {
            name: "Boolean"
        }
    }
};
//# sourceMappingURL=parameters.js.map