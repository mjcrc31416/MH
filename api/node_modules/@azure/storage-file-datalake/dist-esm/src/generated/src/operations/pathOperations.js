/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/pathOperationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a PathOperations. */
var PathOperations = /** @class */ (function () {
    /**
     * Create a PathOperations.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function PathOperations(client) {
        this.client = client;
    }
    PathOperations.prototype.create = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createOperationSpec, callback);
    };
    PathOperations.prototype.update = function (action, body, options, callback) {
        return this.client.sendOperationRequest({
            action: action,
            body: body,
            options: options
        }, updateOperationSpec, callback);
    };
    PathOperations.prototype.lease = function (xMsLeaseAction, options, callback) {
        return this.client.sendOperationRequest({
            xMsLeaseAction: xMsLeaseAction,
            options: options
        }, leaseOperationSpec, callback);
    };
    PathOperations.prototype.read = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, readOperationSpec, callback);
    };
    PathOperations.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    PathOperations.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    PathOperations.prototype.setAccessControl = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setAccessControlOperationSpec, callback);
    };
    PathOperations.prototype.flushData = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, flushDataOperationSpec, callback);
    };
    PathOperations.prototype.appendData = function (body, options, callback) {
        return this.client.sendOperationRequest({
            body: body,
            options: options
        }, appendDataOperationSpec, callback);
    };
    return PathOperations;
}());
export { PathOperations };
// Operation Specifications
var serializer = new coreHttp.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.resource2,
        Parameters.continuation,
        Parameters.mode,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.renameSource,
        Parameters.sourceLeaseId,
        Parameters.properties,
        Parameters.permissions,
        Parameters.umask,
        Parameters.requestId,
        Parameters.version,
        Parameters.cacheControl,
        Parameters.contentEncoding,
        Parameters.contentLanguage,
        Parameters.contentDisposition,
        Parameters.contentType,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince,
        Parameters.sourceIfMatch,
        Parameters.sourceIfNoneMatch,
        Parameters.sourceIfModifiedSince,
        Parameters.sourceIfUnmodifiedSince
    ],
    responses: {
        201: {
            headersMapper: Mappers.PathCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathCreateHeaders
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.action0,
        Parameters.position,
        Parameters.retainUncommittedData,
        Parameters.close,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.contentLength,
        Parameters.properties,
        Parameters.owner,
        Parameters.group,
        Parameters.permissions,
        Parameters.acl,
        Parameters.requestId,
        Parameters.version,
        Parameters.contentMD5,
        Parameters.cacheControl,
        Parameters.contentType,
        Parameters.contentDisposition,
        Parameters.contentEncoding,
        Parameters.contentLanguage,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        200: {
            headersMapper: Mappers.PathUpdateHeaders
        },
        202: {
            headersMapper: Mappers.PathUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathUpdateHeaders
        }
    },
    serializer: serializer
};
var leaseOperationSpec = {
    httpMethod: "POST",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.xMsLeaseAction,
        Parameters.xMsLeaseDuration,
        Parameters.xMsLeaseBreakPeriod,
        Parameters.proposedLeaseId,
        Parameters.requestId,
        Parameters.version,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            headersMapper: Mappers.PathLeaseHeaders
        },
        201: {
            headersMapper: Mappers.PathLeaseHeaders
        },
        202: {
            headersMapper: Mappers.PathLeaseHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathLeaseHeaders
        }
    },
    serializer: serializer
};
var readOperationSpec = {
    httpMethod: "GET",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.range,
        Parameters.xMsRangeGetContentMd5,
        Parameters.requestId,
        Parameters.version,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: Mappers.PathReadHeaders
        },
        206: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: Mappers.PathReadHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathReadHeaders
        }
    },
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "HEAD",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.action1,
        Parameters.upn,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.requestId,
        Parameters.version,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            headersMapper: Mappers.PathGetPropertiesHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathGetPropertiesHeaders
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.recursive1,
        Parameters.continuation,
        Parameters.timeout
    ],
    headerParameters: [
        Parameters.requestId,
        Parameters.version,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            headersMapper: Mappers.PathDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathDeleteHeaders
        }
    },
    serializer: serializer
};
var setAccessControlOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeout,
        Parameters.action2
    ],
    headerParameters: [
        Parameters.owner,
        Parameters.group,
        Parameters.permissions,
        Parameters.acl,
        Parameters.requestId,
        Parameters.version,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            headersMapper: Mappers.PathSetAccessControlHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathSetAccessControlHeaders
        }
    },
    serializer: serializer
};
var flushDataOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.timeout,
        Parameters.position,
        Parameters.retainUncommittedData,
        Parameters.close,
        Parameters.action3
    ],
    headerParameters: [
        Parameters.contentLength,
        Parameters.requestId,
        Parameters.version,
        Parameters.contentMD5,
        Parameters.cacheControl,
        Parameters.contentType,
        Parameters.contentDisposition,
        Parameters.contentEncoding,
        Parameters.contentLanguage,
        Parameters.leaseId,
        Parameters.ifMatch,
        Parameters.ifNoneMatch,
        Parameters.ifModifiedSince,
        Parameters.ifUnmodifiedSince
    ],
    responses: {
        200: {
            headersMapper: Mappers.PathFlushDataHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathFlushDataHeaders
        }
    },
    serializer: serializer
};
var appendDataOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}/{path}",
    urlParameters: [
        Parameters.url
    ],
    queryParameters: [
        Parameters.position,
        Parameters.timeout,
        Parameters.action4
    ],
    headerParameters: [
        Parameters.contentLength,
        Parameters.requestId,
        Parameters.version,
        Parameters.transactionalContentHash,
        Parameters.leaseId
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    responses: {
        202: {
            headersMapper: Mappers.PathAppendDataHeaders
        },
        default: {
            bodyMapper: Mappers.StorageError,
            headersMapper: Mappers.PathAppendDataHeaders
        }
    },
    serializer: serializer
};
//# sourceMappingURL=pathOperations.js.map