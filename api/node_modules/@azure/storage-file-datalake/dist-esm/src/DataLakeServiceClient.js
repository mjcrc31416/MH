// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { __assign, __awaiter, __extends, __generator } from "tslib";
import "@azure/core-paging";
import { BlobServiceClient } from "@azure/storage-blob";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { DataLakeFileSystemClient } from "./DataLakeFileSystemClient";
import { Pipeline, newPipeline } from "./Pipeline";
import { StorageClient } from "./StorageClient";
import { appendToURLPath } from "./utils/utils.common";
import { createSpan } from "./utils/tracing";
import { toFileSystemPagedAsyncIterableIterator } from "./transforms";
import { CanonicalCode } from "@opentelemetry/types";
import { getCachedDefaultHttpClient } from "./utils/cache";
/**
 * DataLakeServiceClient allows you to manipulate Azure
 * Data Lake service resources and file systems. The storage account provides
 * the top-level namespace for the Data Lake service.
 *
 * @export
 * @class DataLakeServiceClient
 * @extends {StorageClient}
 */
var DataLakeServiceClient = /** @class */ (function (_super) {
    __extends(DataLakeServiceClient, _super);
    function DataLakeServiceClient(url, credentialOrPipeline, options) {
        var _this = this;
        // when options.httpClient is not specified, passing in a DefaultHttpClient instance to
        // avoid each client creating its own http client.
        var newOptions = __assign({ httpClient: getCachedDefaultHttpClient() }, options);
        if (credentialOrPipeline instanceof Pipeline) {
            _this = _super.call(this, url, credentialOrPipeline) || this;
        }
        else {
            var credential = void 0;
            if (credentialOrPipeline === undefined) {
                credential = new AnonymousCredential();
            }
            else {
                credential = credentialOrPipeline;
            }
            var pipeline = newPipeline(credential, newOptions);
            _this = _super.call(this, url, pipeline) || this;
        }
        // this.serviceContext = new Service(this.storageClientContext);
        _this.blobServiceClient = new BlobServiceClient(_this.blobEndpointUrl, _this.pipeline);
        return _this;
    }
    /**
     * Creates a {@link DataLakeFileSystemClient} object.
     *
     * @param {string} fileSystemName File system name.
     * @returns {DataLakeFileSystemClient}
     * @memberof DataLakeServiceClient
     */
    DataLakeServiceClient.prototype.getFileSystemClient = function (fileSystemName) {
        return new DataLakeFileSystemClient(appendToURLPath(this.url, encodeURIComponent(fileSystemName)), this.pipeline);
    };
    /**
     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
     *
     * Retrieves a user delegation key for the Data Lake service. This is only a valid operation when using
     * bearer token authentication.
     *
     * @example
     * ```js
     * // Generate user delegation SAS for a file system
     * const userDelegationKey = await dataLakeServiceClient.getUserDelegationKey(startsOn, expiresOn);
     * const fileSystemSAS = generateDataLakeSASQueryParameters({
     *     fileSystemName, // Required
     *     permissions: FileSystemSASPermissions.parse("racwdl"), // Required
     *     startsOn, // Required. Date type
     *     expiresOn, // Optional. Date type
     *     ipRange: { start: "0.0.0.0", end: "255.255.255.255" }, // Optional
     *     protocol: SASProtocol.HttpsAndHttp, // Optional
     *     version: "2018-11-09" // Must >= 2018-11-09 to generate user delegation SAS
     *   },
     *   userDelegationKey, // UserDelegationKey
     *   accountName
     * ).toString();
     * ```
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
     *
     * @param {Date} startsOn The start time for the user delegation SAS. Must be within 7 days of the current time.
     * @param {Date} expiresOn The end time for the user delegation SAS. Must be within 7 days of the current time.
     * @param {ServiceGetUserDelegationKeyOptions} [options={}]
     * @returns {Promise<ServiceGetUserDelegationKeyResponse>}
     * @memberof DataLakeServiceClient
     */
    DataLakeServiceClient.prototype.getUserDelegationKey = function (startsOn, expiresOn, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = createSpan("DataLakeServiceClient-getUserDelegationKey", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobServiceClient.getUserDelegationKey(startsOn, expiresOn, __assign(__assign({}, options), { tracingOptions: __assign(__assign({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_1 = _b.sent();
                        span.setStatus({
                            code: CanonicalCode.UNKNOWN,
                            message: e_1.message
                        });
                        throw e_1;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an async iterable iterator to list all the file systems
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the file systems in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const fileSystem of serviceClient.listFileSystems()) {
     *   console.log(`FileSystem ${i++}: ${fileSystem.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = serviceClient.listFileSystems();
     * let fileSystemItem = await iter.next();
     * while (!fileSystemItem.done) {
     *   console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);
     *   fileSystemItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of serviceClient.listFileSystems().byPage({ maxPageSize: 20 })) {
     *   if (response.fileSystemItems) {
     *     for (const fileSystem of response.fileSystemItems) {
     *       console.log(`FileSystem ${i++}: ${fileSystem.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 file system names
     * if (response.fileSystemItems) {
     *   for (const fileSystem of response.fileSystemItems) {
     *     console.log(`FileSystem ${i++}: ${fileSystem.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = serviceClient
     *   .listContainers()
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 file system names
     * if (response.fileSystemItems) {
     *   for (const fileSystem of response.fileSystemItems) {
     *      console.log(`FileSystem ${i++}: ${fileSystem.name}`);
     *   }
     * }
     * ```
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
     *
     * @param {ServiceListFileSystemsOptions} [options={}]
     * @returns {PagedAsyncIterableIterator<FileSystemItem, ServiceListFileSystemsSegmentResponse>}
     * @memberof DataLakeServiceClient
     */
    DataLakeServiceClient.prototype.listFileSystems = function (options) {
        if (options === void 0) { options = {}; }
        return toFileSystemPagedAsyncIterableIterator(this.blobServiceClient.listContainers(options));
    };
    return DataLakeServiceClient;
}(StorageClient));
export { DataLakeServiceClient };
//# sourceMappingURL=DataLakeServiceClient.js.map