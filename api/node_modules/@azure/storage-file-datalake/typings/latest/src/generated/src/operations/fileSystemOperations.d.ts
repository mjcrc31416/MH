import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a FileSystemOperations. */
export declare class FileSystemOperations {
    private readonly client;
    /**
     * Create a FileSystemOperations.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * Create a FileSystem rooted at the specified location. If the FileSystem already exists, the
     * operation fails.  This operation does not support conditional HTTP requests.
     * @summary Create FileSystem
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSystemCreateResponse>
     */
    create(options?: Models.FileSystemCreateOptionalParams): Promise<Models.FileSystemCreateResponse>;
    /**
     * @param callback The callback
     */
    create(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    create(options: Models.FileSystemCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Set properties for the FileSystem.  This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Set FileSystem Properties
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSystemSetPropertiesResponse>
     */
    setProperties(options?: Models.FileSystemSetPropertiesOptionalParams): Promise<Models.FileSystemSetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    setProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setProperties(options: Models.FileSystemSetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * All system and user-defined filesystem properties are specified in the response headers.
     * @summary Get FileSystem Properties.
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSystemGetPropertiesResponse>
     */
    getProperties(options?: Models.FileSystemGetPropertiesOptionalParams): Promise<Models.FileSystemGetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    getProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProperties(options: Models.FileSystemGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Marks the FileSystem for deletion.  When a FileSystem is deleted, a FileSystem with the same
     * identifier cannot be created for at least 30 seconds. While the filesystem is being deleted,
     * attempts to create a filesystem with the same identifier will fail with status code 409
     * (Conflict), with the service returning additional error information indicating that the
     * filesystem is being deleted. All other operations, including operations on any files or
     * directories within the filesystem, will fail with status code 404 (Not Found) while the
     * filesystem is being deleted. This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Delete FileSystem
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSystemDeleteResponse>
     */
    deleteMethod(options?: Models.FileSystemDeleteMethodOptionalParams): Promise<Models.FileSystemDeleteResponse>;
    /**
     * @param callback The callback
     */
    deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(options: Models.FileSystemDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * List FileSystem paths and their properties.
     * @summary List Paths
     * @param recursive Required
     * @param [options] The optional parameters
     * @returns Promise<Models.FileSystemListPathsResponse>
     */
    listPaths(recursive: boolean, options?: Models.FileSystemListPathsOptionalParams): Promise<Models.FileSystemListPathsResponse>;
    /**
     * @param recursive Required
     * @param callback The callback
     */
    listPaths(recursive: boolean, callback: coreHttp.ServiceCallback<Models.PathList>): void;
    /**
     * @param recursive Required
     * @param options The optional parameters
     * @param callback The callback
     */
    listPaths(recursive: boolean, options: Models.FileSystemListPathsOptionalParams, callback: coreHttp.ServiceCallback<Models.PathList>): void;
}
//# sourceMappingURL=fileSystemOperations.d.ts.map