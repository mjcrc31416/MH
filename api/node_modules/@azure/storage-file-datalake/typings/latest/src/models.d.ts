/// <reference types="node" />
import { AbortSignalLike } from "@azure/abort-controller";
import { HttpResponse, TransferProgressEvent } from "@azure/core-http";
import { LeaseAccessConditions, ModifiedAccessConditions, UserDelegationKeyModel } from "@azure/storage-blob";
import { PathCreateResponse, PathGetPropertiesHeaders as PathGetPropertiesHeadersModel, FileSystemListPathsHeaders, PathList as PathListModel } from "./generated/src/models";
import { CommonOptions } from "./StorageClient";
export { LeaseAccessConditions, UserDelegationKeyModel, ServiceListContainersSegmentResponse, Lease, LeaseOperationOptions, LeaseOperationResponse } from "@azure/storage-blob";
export { FileSystemListPathsHeaders, FileSystemListPathsResponse as ListPathsSegmentResponse, PathList as PathListModel, PathCreateHeaders, PathDeleteHeaders, PathDeleteResponse, PathSetAccessControlResponse, PathSetAccessControlResponse as PathSetPermissionsResponse, PathResourceType, PathUpdateResponse as FileAppendResponse, PathUpdateResponse as FileFlushResponse, PathGetPropertiesAction, PathRenameMode } from "./generated/src/models";
export { PathCreateResponse };
/*************************************************************/
/** DataLakeServiceClient option and response related models */
/*************************************************************/
export interface ServiceGetUserDelegationKeyOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
}
export interface ServiceGetUserDelegationKeyHeaders {
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export interface UserDelegationKey {
    signedObjectId: string;
    signedTenantId: string;
    signedStartsOn: Date;
    signedExpiresOn: Date;
    signedService: string;
    signedVersion: string;
    value: string;
}
export declare type ServiceGetUserDelegationKeyResponse = UserDelegationKey & ServiceGetUserDelegationKeyHeaders & {
    _response: HttpResponse & {
        parsedHeaders: ServiceGetUserDelegationKeyHeaders;
        bodyAsText: string;
        parsedBody: UserDelegationKeyModel;
    };
};
export interface ServiceListFileSystemsOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    prefix?: string;
    includeMetadata?: boolean;
}
export declare type LeaseStatusType = "locked" | "unlocked";
export declare type LeaseStateType = "available" | "leased" | "expired" | "breaking" | "broken";
export declare type LeaseDurationType = "infinite" | "fixed";
export declare type PublicAccessType = "filesystem" | "file";
export interface FileSystemProperties {
    lastModified: Date;
    etag: string;
    leaseStatus?: LeaseStatusType;
    leaseState?: LeaseStateType;
    leaseDuration?: LeaseDurationType;
    publicAccess?: PublicAccessType;
    hasImmutabilityPolicy?: boolean;
    hasLegalHold?: boolean;
}
export interface FileSystemItem {
    name: string;
    properties: FileSystemProperties;
    metadata?: Metadata;
}
export interface ListFileSystemsSegmentResponse {
    serviceEndpoint: string;
    prefix?: string;
    marker?: string;
    maxPageSize?: number;
    fileSystemItems: FileSystemItem[];
    continuationToken?: string;
}
export interface ServiceListFileSystemsSegmentHeaders {
    clientRequestId?: string;
    requestId?: string;
    version?: string;
}
export declare type ServiceListFileSystemsSegmentResponse = ListFileSystemsSegmentResponse & ServiceListFileSystemsSegmentHeaders & {
    _response: HttpResponse & {
        parsedHeaders: ServiceListFileSystemsSegmentHeaders;
        bodyAsText: string;
        parsedBody: ListFileSystemsSegmentResponse;
    };
};
/****************************************************************/
/** DataLakeFileSystemClient option and response related models */
/****************************************************************/
export interface FileSystemCreateOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    metadata?: Metadata;
    access?: PublicAccessType;
}
export interface FileSystemCreateHeaders {
    etag?: string;
    lastModified?: Date;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export declare type FileSystemCreateResponse = FileSystemCreateHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemCreateHeaders;
    };
};
export interface FileSystemDeleteOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export interface FileSystemDeleteHeaders {
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export declare type FileSystemDeleteResponse = FileSystemDeleteHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemDeleteHeaders;
    };
};
export interface FileSystemGetPropertiesOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: LeaseAccessConditions;
}
export interface FileSystemGetPropertiesHeaders {
    metadata?: Metadata;
    etag?: string;
    lastModified?: Date;
    leaseDuration?: LeaseDurationType;
    leaseState?: LeaseStateType;
    leaseStatus?: LeaseStatusType;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
    publicAccess?: PublicAccessType;
    hasImmutabilityPolicy?: boolean;
    hasLegalHold?: boolean;
}
export declare type FileSystemGetPropertiesResponse = FileSystemGetPropertiesHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemGetPropertiesHeaders;
    };
};
export interface FileSystemSetMetadataOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export interface FileSystemSetMetadataHeaders {
    etag?: string;
    lastModified?: Date;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export declare type FileSystemSetMetadataResponse = FileSystemSetMetadataHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemSetMetadataHeaders;
    };
};
export interface FileSystemGetAccessPolicyOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: LeaseAccessConditions;
}
export interface FileSystemGetAccessPolicyHeaders {
    publicAccess?: PublicAccessType;
    etag?: string;
    lastModified?: Date;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export interface RawAccessPolicy {
    startsOn?: string;
    expiresOn?: string;
    permissions: string;
}
export interface AccessPolicy {
    startsOn?: Date;
    expiresOn?: Date;
    permissions: string;
}
export interface SignedIdentifier<T> {
    id: string;
    accessPolicy: T;
}
export declare type FileSystemGetAccessPolicyResponse = {
    signedIdentifiers: SignedIdentifier<AccessPolicy>[];
} & FileSystemGetAccessPolicyHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemGetAccessPolicyHeaders;
        bodyAsText: string;
        parsedBody: SignedIdentifier<RawAccessPolicy>[];
    };
};
export interface FileSystemSetAccessPolicyOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export interface FileSystemSetAccessPolicyHeaders {
    etag?: string;
    lastModified?: Date;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export declare type FileSystemSetAccessPolicyResponse = FileSystemSetAccessPolicyHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemSetAccessPolicyHeaders;
    };
};
export interface ListPathsOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    recursive?: boolean;
    path?: string;
    userPrincipalName?: boolean;
}
export interface ListPathsSegmentOptions extends ListPathsOptions {
    maxResults?: number;
}
export interface Path {
    name?: string;
    isDirectory?: boolean;
    lastModified?: Date;
    eTag?: string;
    contentLength?: number;
    owner?: string;
    group?: string;
    permissions?: PathPermissions;
}
export interface PathList {
    pathItems?: Path[];
}
export declare type FileSystemListPathsResponse = PathList & FileSystemListPathsHeaders & {
    _response: HttpResponse & {
        parsedHeaders: FileSystemListPathsHeaders;
        bodyAsText: string;
        parsedBody: PathListModel;
    };
};
/**********************************************************/
/** DataLakePathClient option and response related models */
/**********************************************************/
export interface Metadata {
    [propertyName: string]: string;
}
export interface DataLakeRequestConditions extends ModifiedAccessConditions, LeaseAccessConditions {
}
export interface RolePermissions {
    read: boolean;
    write: boolean;
    execute: boolean;
}
export interface PathPermissions {
    owner: RolePermissions;
    group: RolePermissions;
    other: RolePermissions;
    stickyBit: boolean;
    extendedAcls: boolean;
}
export declare type AccessControlType = "user" | "group" | "mask" | "other";
export interface PathAccessControlItem {
    defaultScope: boolean;
    accessControlType: AccessControlType;
    entityId: string;
    permissions: RolePermissions;
}
export interface PathCreateHttpHeaders {
    cacheControl?: string;
    contentEncoding?: string;
    contentLanguage?: string;
    contentDisposition?: string;
    contentType?: string;
}
export interface PathCreateOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    metadata?: Metadata;
    permissions?: string;
    umask?: string;
    conditions?: DataLakeRequestConditions;
    pathHttpHeaders?: PathCreateHttpHeaders;
}
export interface PathDeleteOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export interface PathGetAccessControlOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
    userPrincipalName?: boolean;
}
export interface PathGetAccessControlHeaders {
    date?: Date;
    eTag?: string;
    lastModified?: Date;
    owner?: string;
    group?: string;
    requestId?: string;
    version?: string;
}
export interface PathAccessControl {
    owner?: string;
    group?: string;
    permissions?: PathPermissions;
    acl: PathAccessControlItem[];
}
export declare type PathGetAccessControlResponse = PathAccessControl & PathGetAccessControlHeaders & {
    _response: HttpResponse & {
        parsedHeaders: PathGetPropertiesHeadersModel;
    };
};
export interface PathSetAccessControlOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
    owner?: string;
    group?: string;
}
export interface PathSetPermissionsOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
    owner?: string;
    group?: string;
}
export interface PathGetPropertiesOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export declare type CopyStatusType = "pending" | "success" | "aborted" | "failed";
export interface PathGetPropertiesHeaders {
    lastModified?: Date;
    createdOn?: Date;
    metadata?: Metadata;
    copyCompletedOn?: Date;
    copyStatusDescription?: string;
    copyId?: string;
    copyProgress?: string;
    copySource?: string;
    copyStatus?: CopyStatusType;
    isIncrementalCopy?: boolean;
    destinationSnapshot?: string;
    leaseDuration?: LeaseDurationType;
    leaseState?: LeaseStateType;
    leaseStatus?: LeaseStatusType;
    contentLength?: number;
    contentType?: string;
    etag?: string;
    contentMD5?: Uint8Array;
    contentEncoding?: string;
    contentDisposition?: string;
    contentLanguage?: string;
    cacheControl?: string;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
    acceptRanges?: string;
    isServerEncrypted?: boolean;
    encryptionKeySha256?: string;
    accessTier?: string;
    accessTierInferred?: boolean;
    archiveStatus?: string;
    accessTierChangedOn?: Date;
}
export declare type PathGetPropertiesResponse = PathGetPropertiesHeaders & {
    _response: HttpResponse & {
        parsedHeaders: PathGetPropertiesHeaders;
    };
};
export interface PathSetHttpHeadersOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export interface PathHttpHeaders {
    cacheControl?: string;
    contentEncoding?: string;
    contentLanguage?: string;
    contentDisposition?: string;
    contentType?: string;
    contentMD5?: Uint8Array;
}
export interface PathSetHttpHeadersHeaders {
    etag?: string;
    lastModified?: Date;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
}
export declare type PathSetHttpHeadersResponse = PathSetHttpHeadersHeaders & {
    _response: HttpResponse & {
        parsedHeaders: PathSetHttpHeadersHeaders;
    };
};
export interface PathSetMetadataOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
}
export interface PathSetMetadataHeaders {
    etag?: string;
    lastModified?: Date;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    date?: Date;
    isServerEncrypted?: boolean;
    encryptionKeySha256?: string;
}
export declare type PathSetMetadataResponse = PathSetMetadataHeaders & {
    _response: HttpResponse & {
        parsedHeaders: PathSetMetadataHeaders;
    };
};
export interface PathMoveOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
    destinationConditions?: DataLakeRequestConditions;
}
export interface PathRemoveHeaders {
    date?: Date;
    eTag?: string;
    lastModified?: Date;
    requestId?: string;
    version?: string;
    contentLength?: number;
}
export declare type PathMoveResponse = PathRemoveHeaders & {
    _response: HttpResponse & {
        parsedHeaders: PathRemoveHeaders;
    };
};
/****************************************************************/
/** DataLakeDirectoryClient option and response related models **/
/****************************************************************/
export interface DirectoryCreateOptions extends PathCreateOptions {
}
export interface DirectoryCreateResponse extends PathCreateResponse {
}
/***********************************************************/
/** DataLakeFileClient option and response related models **/
/***********************************************************/
export interface FileReadOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    rangeGetContentMD5?: boolean;
    rangeGetContentCrc64?: boolean;
    conditions?: DataLakeRequestConditions;
    onProgress?: (progress: TransferProgressEvent) => void;
    maxRetryRequests?: number;
}
export interface FileReadHeaders {
    lastModified?: Date;
    metadata?: Metadata;
    contentLength?: number;
    contentType?: string;
    contentRange?: string;
    etag?: string;
    contentMD5?: Uint8Array;
    contentEncoding?: string;
    cacheControl?: string;
    contentDisposition?: string;
    contentLanguage?: string;
    copyCompletedOn?: Date;
    copyStatusDescription?: string;
    copyId?: string;
    copyProgress?: string;
    copySource?: string;
    copyStatus?: CopyStatusType;
    leaseDuration?: LeaseDurationType;
    leaseState?: LeaseStateType;
    leaseStatus?: LeaseStatusType;
    clientRequestId?: string;
    requestId?: string;
    version?: string;
    acceptRanges?: string;
    date?: Date;
    isServerEncrypted?: boolean;
    encryptionKeySha256?: string;
    fileContentMD5?: Uint8Array;
    contentCrc64?: Uint8Array;
}
export declare type FileReadResponse = FileReadHeaders & {
    contentAsBlob?: Promise<Blob>;
    readableStreamBody?: NodeJS.ReadableStream;
    _response: HttpResponse & {
        parsedHeaders: FileReadHeaders;
    };
};
export interface FileAppendOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: LeaseAccessConditions;
    transactionalContentMD5?: Uint8Array;
    onProgress?: (progress: TransferProgressEvent) => void;
}
export interface FileFlushOptions extends CommonOptions {
    abortSignal?: AbortSignalLike;
    conditions?: DataLakeRequestConditions;
    retainUncommittedData?: boolean;
    close?: boolean;
    pathHttpHeaders?: PathHttpHeaders;
}
export interface FileCreateOptions extends PathCreateOptions {
}
export interface FileCreateResponse extends PathCreateResponse {
}
/***********************************************************/
/** DataLakeLeaseClient option and response related models */
/***********************************************************/
//# sourceMappingURL=models.d.ts.map