import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import { StorageClientContext } from "../storageClientContext";
/** Class representing a PathOperations. */
export declare class PathOperations {
    private readonly client;
    /**
     * Create a PathOperations.
     * @param {StorageClientContext} client Reference to the service client.
     */
    constructor(client: StorageClientContext);
    /**
     * Create or rename a file or directory.    By default, the destination is overwritten and if the
     * destination already exists and has a lease the lease is broken.  This operation supports
     * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob
     * Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * To fail if the destination already exists, use a conditional request with If-None-Match: "*".
     * @summary Create File | Create Directory | Rename File | Rename Directory
     * @param [options] The optional parameters
     * @returns Promise<Models.PathCreateResponse>
     */
    create(options?: Models.PathCreateOptionalParams): Promise<Models.PathCreateResponse>;
    /**
     * @param callback The callback
     */
    create(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    create(options: Models.PathCreateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets
     * properties for a file or directory, or sets access control for a file or directory. Data can
     * only be appended to a file. This operation supports conditional HTTP requests. For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Append Data | Flush Data | Set Properties | Set Access Control
     * @param action The action must be "append" to upload data to be appended to a file, "flush" to
     * flush previously uploaded data to a file, "setProperties" to set the properties of a file or
     * directory, or "setAccessControl" to set the owner, group, permissions, or access control list
     * for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in
     * order to use access control.  Also note that the Access Control List (ACL) includes permissions
     * for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers
     * are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties',
     * 'setAccessControl'
     * @param body Initial data
     * @param [options] The optional parameters
     * @returns Promise<Models.PathUpdateResponse>
     */
    update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, options?: Models.PathUpdateOptionalParams): Promise<Models.PathUpdateResponse>;
    /**
     * @param action The action must be "append" to upload data to be appended to a file, "flush" to
     * flush previously uploaded data to a file, "setProperties" to set the properties of a file or
     * directory, or "setAccessControl" to set the owner, group, permissions, or access control list
     * for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in
     * order to use access control.  Also note that the Access Control List (ACL) includes permissions
     * for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers
     * are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties',
     * 'setAccessControl'
     * @param body Initial data
     * @param callback The callback
     */
    update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param action The action must be "append" to upload data to be appended to a file, "flush" to
     * flush previously uploaded data to a file, "setProperties" to set the properties of a file or
     * directory, or "setAccessControl" to set the owner, group, permissions, or access control list
     * for a file or directory.  Note that Hierarchical Namespace must be enabled for the account in
     * order to use access control.  Also note that the Access Control List (ACL) includes permissions
     * for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers
     * are mutually exclusive. Possible values include: 'append', 'flush', 'setProperties',
     * 'setAccessControl'
     * @param body Initial data
     * @param options The optional parameters
     * @param callback The callback
     */
    update(action: Models.PathUpdateAction, body: coreHttp.HttpRequestBody, options: Models.PathUpdateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Create and manage a lease to restrict write and delete access to the path. This operation
     * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers
     * for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Lease Path
     * @param xMsLeaseAction There are five lease actions: "acquire", "break", "change", "renew", and
     * "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to
     * acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease
     * break period is allowed to elapse, during which time no lease operation except break and release
     * can be performed on the file. When a lease is successfully broken, the response indicates the
     * interval in seconds until a new lease can be acquired. Use "change" and specify the current
     * lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease
     * ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
     * Use "release" and specify the "x-ms-lease-id" to release a lease. Possible values include:
     * 'acquire', 'break', 'change', 'renew', 'release'
     * @param [options] The optional parameters
     * @returns Promise<Models.PathLeaseResponse>
     */
    lease(xMsLeaseAction: Models.PathLeaseAction, options?: Models.PathLeaseOptionalParams): Promise<Models.PathLeaseResponse>;
    /**
     * @param xMsLeaseAction There are five lease actions: "acquire", "break", "change", "renew", and
     * "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to
     * acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease
     * break period is allowed to elapse, during which time no lease operation except break and release
     * can be performed on the file. When a lease is successfully broken, the response indicates the
     * interval in seconds until a new lease can be acquired. Use "change" and specify the current
     * lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease
     * ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
     * Use "release" and specify the "x-ms-lease-id" to release a lease. Possible values include:
     * 'acquire', 'break', 'change', 'renew', 'release'
     * @param callback The callback
     */
    lease(xMsLeaseAction: Models.PathLeaseAction, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param xMsLeaseAction There are five lease actions: "acquire", "break", "change", "renew", and
     * "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to
     * acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease
     * break period is allowed to elapse, during which time no lease operation except break and release
     * can be performed on the file. When a lease is successfully broken, the response indicates the
     * interval in seconds until a new lease can be acquired. Use "change" and specify the current
     * lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease
     * ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease.
     * Use "release" and specify the "x-ms-lease-id" to release a lease. Possible values include:
     * 'acquire', 'break', 'change', 'renew', 'release'
     * @param options The optional parameters
     * @param callback The callback
     */
    lease(xMsLeaseAction: Models.PathLeaseAction, options: Models.PathLeaseOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Read the contents of a file.  For read operations, range requests are supported. This operation
     * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers
     * for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Read File
     * @param [options] The optional parameters
     * @returns Promise<Models.PathReadResponse>
     */
    read(options?: Models.PathReadOptionalParams): Promise<Models.PathReadResponse>;
    /**
     * @param callback The callback
     */
    read(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    read(options: Models.PathReadOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Get Properties returns all system and user defined properties for a path. Get Status returns all
     * system defined properties for a path. Get Access Control List returns the access control list
     * for a path. This operation supports conditional HTTP requests.  For more information, see
     * [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Get Properties | Get Status | Get Access Control List
     * @param [options] The optional parameters
     * @returns Promise<Models.PathGetPropertiesResponse>
     */
    getProperties(options?: Models.PathGetPropertiesOptionalParams): Promise<Models.PathGetPropertiesResponse>;
    /**
     * @param callback The callback
     */
    getProperties(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProperties(options: Models.PathGetPropertiesOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Delete the file or directory. This operation supports conditional HTTP requests.  For more
     * information, see [Specifying Conditional Headers for Blob Service
     * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
     * @summary Delete File | Delete Directory
     * @param [options] The optional parameters
     * @returns Promise<Models.PathDeleteResponse>
     */
    deleteMethod(options?: Models.PathDeleteMethodOptionalParams): Promise<Models.PathDeleteResponse>;
    /**
     * @param callback The callback
     */
    deleteMethod(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(options: Models.PathDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Set the owner, group, permissions, or access control list for a path.
     * @param [options] The optional parameters
     * @returns Promise<Models.PathSetAccessControlResponse>
     */
    setAccessControl(options?: Models.PathSetAccessControlOptionalParams): Promise<Models.PathSetAccessControlResponse>;
    /**
     * @param callback The callback
     */
    setAccessControl(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    setAccessControl(options: Models.PathSetAccessControlOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Set the owner, group, permissions, or access control list for a path.
     * @param [options] The optional parameters
     * @returns Promise<Models.PathFlushDataResponse>
     */
    flushData(options?: Models.PathFlushDataOptionalParams): Promise<Models.PathFlushDataResponse>;
    /**
     * @param callback The callback
     */
    flushData(callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    flushData(options: Models.PathFlushDataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * Append data to the file.
     * @param body Initial data
     * @param [options] The optional parameters
     * @returns Promise<Models.PathAppendDataResponse>
     */
    appendData(body: coreHttp.HttpRequestBody, options?: Models.PathAppendDataOptionalParams): Promise<Models.PathAppendDataResponse>;
    /**
     * @param body Initial data
     * @param callback The callback
     */
    appendData(body: coreHttp.HttpRequestBody, callback: coreHttp.ServiceCallback<void>): void;
    /**
     * @param body Initial data
     * @param options The optional parameters
     * @param callback The callback
     */
    appendData(body: coreHttp.HttpRequestBody, options: Models.PathAppendDataOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
}
//# sourceMappingURL=pathOperations.d.ts.map